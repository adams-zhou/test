npm install axios

main.js
// Modules to control application life and create native browser window
const { app, BrowserWindow, ipcMain } = require('electron');
const axios = require('axios');
const path = require('node:path');

function createWindow () {
  // Create the browser window.
  const mainWindow = new BrowserWindow({
    width: 800,
    height: 600,
    webPreferences: {
	  nodeIntegration: true,
	  contextIsolation: false,
      preload: path.join(__dirname, 'preload.js')
    }
  })

  // and load the index.html of the app.
  mainWindow.loadFile('index.html')

  // Open the DevTools.
  mainWindow.webContents.openDevTools()
  
  ipcMain.on('fetch-data', (event, args) => {
	  axios({
		  method: "get",
		  url: "https://jsonplaceholder.typicode.com/todos/1",
	  }).then(response => {
		  console.log(response.data);
		  event.reply('fetch-data-response', response.data);
	  }).catch(error =>{
		  console.log(error)
	  });
   });
  
}

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.whenReady().then(() => {
  createWindow()

  app.on('activate', function () {
    // On macOS it's common to re-create a window in the app when the
    // dock icon is clicked and there are no other windows open.
    if (BrowserWindow.getAllWindows().length === 0) createWindow()
  })
})

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', function () {
  if (process.platform !== 'darwin') app.quit()
})

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and require them here.


renderer.js
const { ipcRenderer } = require('electron');

window.onload = () => {
	var input = this.document.querySelector("#input");
	var input_btn = this.document.querySelector("#input_btn");
	var clear_btn = this.document.querySelector("#clear_btn");
	var myBody = this.document.querySelector("#myBody");
	
	input_btn.onclick = () => {
		myBody.innerHTML = input.value;
	}
	clear_btn.onclick = () => {
		myBody.innerHTML = "";
	}
}

const responseElement = document.getElementById('response');

ipcRenderer.on('fetch-data-response', (event, data) => {
   responseElement.innerHTML = JSON.stringify(data);
});

ipcRenderer.send('fetch-data');


index.html
<!DOCTYPE html>
<html>
  <head>
    <meta charset="UTF-8">
    <!-- https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP -->
    <meta http-equiv="Content-Security-Policy" content="default-src 'self'; script-src 'self'; style-src 'self' 'unsafe-inline'">
    <link href="./styles.css" rel="stylesheet">
    <title>Hello World!</title>
  </head>
  <body>
    <h1>Hello World!</h1>
    We are using Node.js <span id="node-version"></span>,
    Chromium <span id="chrome-version"></span>,
    and Electron <span id="electron-version"></span>.
	
	<div>
		<input type="text" id="input">
		<button id="input_btn">click me</button>
		<button id="clear_btn">clear</button>
		<div id="myBody"></div>
	</div>
	<div>
		<h1> HTTP Request Response Using Request Package </h1>
		<p id = "response"> </p>
	</div>
    <!-- You can also require other files to run in this process -->
    <script src="./renderer.js"></script>
  </body>
</html>

